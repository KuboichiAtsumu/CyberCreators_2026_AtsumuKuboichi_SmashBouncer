//==============================================================================================================================================
//
// エネミーバレット(打ち上げ)の処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "launchenemybullet.h"//エネミーバレット(打ち上げ)

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CLaunchEnemyBullet::CLaunchEnemyBullet(int nPriority) : CBullet(nPriority)
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CLaunchEnemyBullet::~CLaunchEnemyBullet()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CLaunchEnemyBullet::Init()
{
	//バレット初期化処理
	if (FAILED(CBullet::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CLaunchEnemyBullet::Uninit()
{
	//バレット終了処理
	CBullet::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CLaunchEnemyBullet::Update()
{
	//バレット更新処理
	CBullet::Update();

	//情報の取得
	D3DXVECTOR3 move = GetMove();//移動量

	//重力を加算
	move.y -= MAX_GRAVITY;
	SetMove(move);

	//弾がフィールドに着弾した場合
	if (GetPos().y < 0.0f)
	{
		//終了処理
		Uninit();
	}
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CLaunchEnemyBullet::Draw()
{
	//バレット描画処理
	CBullet::Draw();
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
bool CLaunchEnemyBullet::Collision(D3DXVECTOR3 pos)
{
	//ローカル変数宣言
	bool bCollision = false;//当たり判定

	//対象オブジェクトとの距離を求める
	CBullet::Collision(pos);

	//バレットが範囲内にある場合
	if (GetLength() <= REFLECT_RANGE)
	{
		bCollision = true;
	}

	return bCollision;
}
