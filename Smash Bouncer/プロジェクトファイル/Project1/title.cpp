//==============================================================================================================================================
//
// タイトル画面に関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "title.h"//タイトル
#include "fade.h"//フェード
#include "logo.h"//タイトルロゴ
#include "push.h"//PUSH UI
#include "camera.h"//カメラ
#include "fade.h"//フェード

//オブジェクト
#include "field.h"//フィールド
#include "zone.h"//ゾーン

//マネージャー
#include "blockmanager.h"//ブロックマネージャー
#include "bulletmanager.h"//バレットマネージャー

//===========================================================================================================
// 静的メンバ変数初期化
//===========================================================================================================
CBlockManager* CTitle::m_pBlockManager = nullptr;//ブロックマネージャー情報
CBulletManager* CTitle::m_pBulletManager = nullptr;//バレットマネージャー情報

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CTitle::CTitle()
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CTitle::~CTitle()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CTitle::Init()
{
	//モデル・テクスチャ情報の読み込みと登録処理
	CXfile::LoadModelFile();//モデルファイルパス読込
	CXfile::LoadTextureFile();//テクスチャファイルパス読込
	CXfile::Regist();//登録処理

	//タイトルロゴ生成
	CLogo::Create();

	//PUSH UI生成
	CPush::Create();

	//フィールド生成処理
	CField::Create({ -450.0f, 0.0f, 0.0f }, { CField::FIELD_WIDTH, 0.0f, CField::FIELD_HEIGHT });

	//ステージテクスチャファイルパス読込処理
	CZone::LoadZoneTexFile();

	//ステージ区分ゾーン生成
	CZone::Create({ 10.0f, 0.01f, 0.0f }, { CZone::STAGEZONE_WIDTH, 0.0f, CZone::STAGEZONE_HEIGHT }, CZone::STAGE);

	//反射ゾーン生成
	CZone::Create({ -160.0f, 0.02f, 0.0f }, { CZone::REFLECTZONE_WIDTH, 0.0f, CZone::REFLECTZONE_HEIGHT }, CZone::REFLECT);

	//ブロックの生成
	m_pBlockManager = NEW CBlockManager();
	m_pBlockManager->Init();//初期化処理

	//バレットマネージャーの生成
	m_pBulletManager = NEW CBulletManager();
	m_pBulletManager->Init();//初期化処理

	for (int nCnt = 0; nCnt < NUM_CREATE_BULLET; nCnt++)
	{
		//バレット生成
		CBullet::Create({ 0.0f,0.0f,0.0f }, 
			{ sinf(0.5f * (nCnt + 1) + D3DX_PI) * 5.0f, 0.0f, cosf(0.5f * (nCnt + 1) + D3DX_PI) * 5.0f },
			(CBullet::BULLETTYPE)(nCnt % 2 + 1));
	}

	//BGM再生
	CManager::GetSound()->Play(CSound::BGM_TITLE);

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CTitle::Uninit()
{
	//BGM再生終了
	CManager::GetSound()->Stop(CSound::BGM_TITLE);

	//ブロックマネージャー
	if (m_pBlockManager != nullptr)
	{
		m_pBlockManager->Uninit();
		m_pBlockManager = nullptr;
	}

	//バレットマネージャー
	if (m_pBulletManager != nullptr)
	{
		m_pBulletManager->Uninit();
		m_pBulletManager = nullptr;
	}

	//シーン終了処理
	CScene::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CTitle::Update()
{
	//Enterキー、Aボタン、Startボタンが押された場合
	if (CManager::GetKeyboard()->GetTrigger(DIK_RETURN)
		|| CManager::GetJoypad()->GetTrigger(CInputJoypad::JOYKEY_A)
		|| CManager::GetJoypad()->GetTrigger(CInputJoypad::JOYKEY_START))
	{
		//SE再生
		CManager::GetSound()->Play(CSound::SE_MODE);

		//チュートリアル画面へ移行
		CManager::GetFade()->SetFade(MODE_TUTORIAL);
	}

	//カメラの更新処理
	CManager::GetCamera()->Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CTitle::Draw()
{
	//カメラの設定
	CManager::GetCamera()->SetCamera();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CTitle* CTitle::Create()
{
	//メモリを動的確保
	CTitle* pTitle = NEW CTitle();

	//初期化処理
	pTitle->Init();

	return pTitle;
}
