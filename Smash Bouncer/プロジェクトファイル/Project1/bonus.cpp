//==============================================================================================================================================
//
// ボーナスアイテムの処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "bonus.h"//ボーナス
#include "game.h"//ゲームシーン
#include "score.h"//スコア
#include "addscore.h"//スコア加算表示

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CBonus::CBonus(int nPriority) : CItem(nPriority)
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CBonus::~CBonus()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CBonus::Init()
{
	//アイテム初期化処理
	if (FAILED(CItem::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CBonus::Uninit()
{
	//アイテム終了処理
	CItem::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CBonus::Update()
{
	//アイテム更新処理
	CItem::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CBonus::Draw()
{
	//エディタモードの場合
	if (CManager::GetScene()->GetEditMode())
	{//描画せずに処理を抜ける
		return;
	}

	//アイテム描画処理
	CItem::Draw();
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
bool CBonus::Collision(D3DXVECTOR3 pos, D3DXVECTOR3 size, int& nLife)
{
	//ローカル変数宣言
	bool bCollision = false;//当たり判定の結果

	//当たり判定結果を取得
	bCollision = CItem::Collision(pos, size, nLife);

	//当たり判定がtrueの場合
	if (bCollision)
	{
		//SE再生
		CManager::GetSound()->Play(CSound::SE_BONUS);

		//スコアを加算
		CGame::GetScore()->AddScore(500);
		
		//現在の位置情報を保存
		D3DXVECTOR3 CreatePos = GetPos();

		//生成位置の高さを調整
		CreatePos.y += 20.0f;

		for (int nCnt = 0; nCnt < 4; nCnt++)
		{
			//加算スコアを表示
			CAddScore::Create(nCnt, CreatePos, { 10.0f, 20.0f, 0.0f }, 500);
		}

		//終了処理
		Uninit();
	}

	//当たり判定の結果を返す
	return bCollision;
}
