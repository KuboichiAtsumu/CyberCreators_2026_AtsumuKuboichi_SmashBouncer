//==============================================================================================================================================
//
// マウス入力処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "mouse.h"//マウス

//===========================================================================================================
// 静的メンバ変数初期化
//===========================================================================================================
int CInputMouse::m_nCntKey = 0;//長押し時間

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CInputMouse::CInputMouse() : m_MouseStatePress(), m_MouseStateTrigger(), m_MouseStateRepeat()
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CInputMouse::~CInputMouse()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CInputMouse::Init(HINSTANCE hInstance, HWND hWnd)
{
	//DirectInputオブジェクトの生成
	if (FAILED(DirectInput8Create(hInstance, DIRECTINPUT_VERSION, IID_IDirectInput8, (void**)&m_pInput, NULL)))
	{
		return E_FAIL;
	}
	//入力デバイス(キーボード)の生成
	if (FAILED(m_pInput->CreateDevice(GUID_SysMouse, &m_pDevice, NULL)))
	{
		return E_FAIL;
	}
	//データフォーマットを設定
	if (FAILED(m_pDevice->SetDataFormat(&c_dfDIMouse)))
	{
		return E_FAIL;
	}
	//協調モードを設定
	if (FAILED(m_pDevice->SetCooperativeLevel(hWnd, (DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}

	// デバイスの設定
	DIPROPDWORD diprop;
	diprop.diph.dwSize = sizeof(diprop);
	diprop.diph.dwHeaderSize = sizeof(diprop.diph);
	diprop.diph.dwObj = 0;
	diprop.diph.dwHow = DIPH_DEVICE;
	diprop.dwData = DIPROPAXISMODE_REL;	// 相対値モードで設定（絶対値はDIPROPAXISMODE_ABS）

	if (FAILED(m_pDevice->SetProperty(DIPROP_AXISMODE, &diprop.diph)))
	{
		// デバイスの設定に失敗
		return E_FAIL;
	}

	//キーボードへのアクセス権を獲得
	m_pDevice->Acquire();
	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CInputMouse::Uninit()
{
	//長押し時間
	m_nCntKey = 0;

	//インプット終了処理
	CInput::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CInputMouse::Update()
{
	DIMOUSESTATE MouseState;

	//入力デバイスからデータを取得
	if (SUCCEEDED(m_pDevice->GetDeviceState(sizeof(MouseState), &MouseState)))
	{
		m_MouseStatePress = MouseState; //マウスのプレス情報を保存
	}
	else
	{
		m_pDevice->Acquire(); //マウスへのアクセス権を獲得
	}
}

//===========================================================================================================
// プレス情報取得
//===========================================================================================================
bool CInputMouse::GetPress(int nKey)
{
	return ((m_MouseStatePress.rgbButtons[nKey] & 0x80) != 0) ? true : false;
}

//===========================================================================================================
// トリガー情報取得
//===========================================================================================================
bool CInputMouse::GetTrigger(int nKey)
{
	return ((m_MouseStateTrigger.rgbButtons[nKey] & 0x80) != 0) ? true : false;
}

//===========================================================================================================
// リピート情報取得
//===========================================================================================================
bool CInputMouse::GetRepeat(int nKey)
{
	//キーを押している間
	if (GetPress(nKey) == true)
	{
		if (GetTrigger(nKey) == true)
		{
			m_nCntKey = 0;
			return true;
		}

		m_nCntKey++; //押している間をカウント

		if (m_nCntKey >= SPEED_REPEAT) //押し続ける間
		{
			m_nCntKey = 0;
			return true;
		}
	}

	return false;
}
