//==============================================================================================================================================
//
// アイテムの処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "item.h"//アイテム
#include "heart.h"//ハート
#include "bonus.h"//ボーナス

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CItem::CItem(int nPriority) : CObjectX(nPriority)
{
	//メンバ変数初期化
	m_pPrev = nullptr;//前のアイテム情報
	m_pNext = nullptr;//次のアイテム情報
	m_ItemType = {};//アイテムタイプ
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CItem::~CItem()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CItem::Init()
{
	//テクスチャ生成
	CTexture* pTex = CManager::GetTexture();//取得
	int nTextureIdx = pTex->Regist(CXfile::GetSaveModelInfo(CXfile::ITEM, m_ItemType)->aTextureFile);//登録
	BindTexture(pTex->GetAddress(nTextureIdx));//設定
	SetTextureIdx(nTextureIdx);//ID設定

	//モデル生成
	CXfile* pModel = CManager::GetModel();//取得
	int nModelIdx = pModel->Regist(CXfile::GetSaveModelInfo(CXfile::ITEM, m_ItemType)->aModelFile);//登録
	BindModel(pModel->GetAddress(nModelIdx));//設定
	SetModelIdx(nModelIdx);//ID設定
	SetSize();//サイズ設定

	//自分がいるステージIDを登録
	SetPostStageID();

	//Xファイルオブジェクト初期化処理
	if (FAILED(CObjectX::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CItem::Uninit()
{
	CObjectX::Uninit();//オブジェクト破棄
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CItem::Update()
{
	//向き情報を取得
	D3DXVECTOR3 rot = GetRot();

	//回転処理
	rot.y += TURN;

	//角度の補正
	if (rot.y <= -D3DX_PI)
	{
		rot.y = D3DX_PI;
	}
	else if (rot.y >= D3DX_PI)
	{
		rot.y = -D3DX_PI;
	}

	//更新後の向きを設定
	SetRot(rot);
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CItem::Draw()
{
	//エディタモードの場合
	if (CManager::GetScene()->GetEditMode())
	{//描画せずに処理を抜ける
		return;
	}

	//Xファイルオブジェクト描画処理
	CObjectX::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CItem* CItem::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot, int nType)
{
	//タイプに応じて動的確保
	CItem* pItem = NEW CItem();
	switch (nType)
	{
		//ハート
	case HEART:
		pItem = NEW CHeart();
		break;

		//ボーナス
	case BONUS:
		pItem = NEW CBonus();
		break;

	default:
		break;
	}

	pItem->SetType(TYPE::ITEM);//オブジェクトタイプ設定
	pItem->SetPos(pos);//位置設定
	pItem->SetRot(rot);//向き設定
	pItem->SetItemType((ITEMTYPE)nType);//アイテムタイプ設定
	pItem->Init();//初期化処理

	return pItem;
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
bool CItem::Collision(D3DXVECTOR3 pos, D3DXVECTOR3 size, int& nLife)
{
	//ローカル変数宣言
	bool bCollision = false;//当たり判定の結果
	D3DXVECTOR3 Pos = GetPos();//位置情報
	D3DXVECTOR3 Size = GetSize();//サイズ情報

	//X座標が重なった場合
	if (pos.x + size.x * 0.5f >= Pos.x - Size.x * 0.5f && pos.x - size.x * 0.5f <= Pos.x + Size.x * 0.5f)
	{
		//Z座標が重なった場合
		if (pos.z + size.z * 0.5f >= Pos.z - Size.z * 0.5f && pos.z + size.z * 0.5f <= Pos.z + Size.z * 0.5f)
		{
			bCollision = true;
		}
	}

	return bCollision;
}
