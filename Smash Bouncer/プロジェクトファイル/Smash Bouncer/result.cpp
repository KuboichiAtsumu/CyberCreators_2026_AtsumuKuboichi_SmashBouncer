//==============================================================================================================================================
//
// リザルト画面に関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "result.h"//リザルト
#include "fade.h"//フェード
#include "score.h"//スコア

//UI
#include "bg.h"//背景
#include "resultheading.h"//リザルト見出しUI
#include "scoreback.h"//スコア表示背景
#include "scoreUI.h"//スコアUI
#include "scorenumber.h"//スコア表示

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CResult::CResult()
{
	//ローカル変数宣言
	int nScore = 0;//スコア保存用変数

	//ファイルを開く
	FILE* pFile = fopen("data/LastScore.bin", "rb");

	//スコアの読み込み
	if (pFile != nullptr)
	{
		//ファイルの読み込み
		fread(&nScore, sizeof(int), 1, pFile);

		//ファイルを閉じる
		fclose(pFile);
	}

	//スコアを設定
	CScoreNumber::SaveScore(nScore);
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CResult::~CResult()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CResult::Init()
{
	//背景生成
	CBg::Create(CBg::BG_RESULT);

	//見出しUI生成
	CResultHeading::Create();

	//スコア表示背景生成
	CScoreBack::Create();

	//スコアUI生成
	CScoreUI::Create();

	//桁数分スコア数字生成
	for (int nCnt = 0; nCnt < CScoreNumber::GetDigit(); nCnt++)
	{
		CScoreNumber::Create(nCnt, 
			{ 1200.0f - (90.0f * (CScoreNumber::MAX_NUMBER - CScoreNumber::GetDigit())), 400.0f }, 
			{ 90.0f, 140.0f }, 
			{ 1.0f, 1.0f, 1.0f, 0.0f });
	}

	//BGM再生
	CManager::GetSound()->Play(CSound::BGM_RESULT);

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CResult::Uninit()
{
	//BGM再生
	CManager::GetSound()->Stop(CSound::BGM_RESULT);

	//スコアをリセット
	CScoreNumber::SaveScore(0);

	//シーン終了処理
	CScene::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CResult::Update()
{
	//Enterキーが押された場合
	//STARTボタンが押された場合
	if (CManager::GetKeyboard()->GetTrigger(DIK_RETURN)
		|| CManager::GetJoypad()->GetTrigger(CInputJoypad::JOYKEY_START))
	{
		//SE再生
		CManager::GetSound()->Play(CSound::SE_MODE);

		//タイトル画面へ移行
		CManager::GetFade()->SetFade(MODE_TITLE);
	}
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CResult::Draw()
{
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CResult* CResult::Create()
{
	CResult* pResult = NEW CResult();

	//初期化処理
	pResult->Init();

	return pResult;
}
