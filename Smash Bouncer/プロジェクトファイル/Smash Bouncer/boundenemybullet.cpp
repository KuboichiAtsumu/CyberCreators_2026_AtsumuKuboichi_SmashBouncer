//==============================================================================================================================================
//
// エネミーバレット(反射)の処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "boundenemybullet.h"//エネミーバレット(反射)
#include "blockmanager.h"//ブロックマネージャー
#include "tutorial.h"//チュートリアルシーン

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CBoundEnemyBullet::CBoundEnemyBullet(int nPriority) : CBullet(nPriority)
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CBoundEnemyBullet::~CBoundEnemyBullet()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CBoundEnemyBullet::Init()
{
	//バレット初期化処理
	if (FAILED(CBullet::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CBoundEnemyBullet::Uninit()
{
	//バレット終了処理
	CBullet::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CBoundEnemyBullet::Update()
{
	//バレットの更新処理
	CBullet::Update();

	//情報の取得
	D3DXVECTOR3 pos = GetPos();//位置
	D3DXVECTOR3 oldpos = GetOldPos();//過去の位置
	D3DXVECTOR3 rot = GetRot();//向き
	D3DXVECTOR3 move = GetMove();//移動量
	D3DXVECTOR3 size = GetSize();//サイズ
	CBlockManager* pBlockManager = nullptr;//ブロックマネージャー
	
	//シーンに応じてマネージャー情報を取得
	switch (CManager::GetScene()->GetMode())
	{
		//チュートリアル
	case CScene::MODE_TUTORIAL:
		pBlockManager = CTutorial::GetBlockManager();
		break;

		//ゲーム
	case CScene::MODE_GAME:
		pBlockManager = CGame::GetBlockManager();
		break;

	default:
		break;
	}

	//ブロック反射処理
	pBlockManager->Reflection(pos, oldpos, move, rot, size);

	//更新された情報を設定
	SetPos(pos);//位置
	SetRot(rot);//向き
	SetMove(move);//移動量
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CBoundEnemyBullet::Draw()
{
	//バレット描画処理
	CBullet::Draw();
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
bool CBoundEnemyBullet::Collision(D3DXVECTOR3 pos)
{
	//ローカル変数宣言
	bool bCollision = false;//当たり判定

	//対象オブジェクトとの距離を求める
	CBullet::Collision(pos);

	//バレットが範囲内にある場合
	if (GetLength() <= REFLECT_RANGE)
	{
		bCollision = true;
	}

	return bCollision;
}
