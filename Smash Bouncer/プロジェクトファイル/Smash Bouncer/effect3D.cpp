//==============================================================================================================================================
//
// 3Dエフェクトに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "effect3D.h"//3Dエフェクト
#include "target.h"//ターゲット
#include "shockwave.h"//衝撃波
#include "pillar.h"//柱

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CEffect3D::CEffect3D(int nPriority) : CObject3D(nPriority)
{
	//メンバ変数初期化
	m_type = NONE;//3Dエフェクトタイプ
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CEffect3D::~CEffect3D()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CEffect3D::Init()
{
	//テクスチャ生成
	CTexture* pTex = CManager::GetTexture();//取得
	int nTextureIdx = pTex->Regist(TEXTURE_FILE[m_type]);//登録
	BindTexture(pTex->GetAddress(nTextureIdx));//設定
	SetTextureIdx(nTextureIdx);//ID設定

	//3Dオブジェクト初期化処理
	if (FAILED(CObject3D::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CEffect3D::Uninit()
{
	//3Dオブジェクト終了処理
	CObject3D::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CEffect3D::Release()
{
	//3Dオブジェクト解放処理
	CObject3D::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CEffect3D::Update()
{
	//3Dオブジェクト更新処理
	CObject3D::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CEffect3D::Draw()
{
	//3Dオブジェクト描画処理
	CObject3D::Draw();
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CEffect3D* CEffect3D::Create(EFFECT_3D_TYPE type, D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 size)
{
	//タイプに応じて動的確保
	CEffect3D* pEffect3D = nullptr;
	switch (type)
	{
		//ターゲット
	case EFFECT_3D_TARGET:
		pEffect3D = NEW CTarget(3);
		break;

		//衝撃波
	case EFFECT_3D_SHOCKWAVE:
		pEffect3D = NEW CShockWave(3);
		break;

		//柱
	case EFFECT_3D_PILLAR:
		pEffect3D = NEW CPillar(3);
		break;

	default:
		break;
	}

	//3Dエフェクトデータが存在する場合
	if (pEffect3D != nullptr)
	{
		//パラメータ設定
		pEffect3D->SetType(EFFECT);//オブジェクトタイプ
		pEffect3D->SetEffect3DType(type);//3Dエフェクトタイプ
		pEffect3D->SetPos(pos);//位置
		pEffect3D->SetRot(rot);//角度
		pEffect3D->SetSize(size);//サイズ

		//初期化処理
		pEffect3D->Init();
	}

	return pEffect3D;
}
