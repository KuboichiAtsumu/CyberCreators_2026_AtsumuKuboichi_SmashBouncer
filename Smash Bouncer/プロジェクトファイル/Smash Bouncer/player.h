#pragma once
//==============================================================================================================================================
//
// プレイヤーに関する処理のヘッダーファイル
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================
#ifndef _PLAYER_H_ //このマクロ定義がされなかったら
#define _PLAYER_H_ //2重インクルード防止のマクロ定義

//===========================================================================================================
// 前方宣言
//===========================================================================================================
class CBullet;//バレットクラス

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "motion.h"//モーション

//===========================================================================================================
// クラス定義
//===========================================================================================================
class CPlayer : public CMotionCharacter
{
public:
	//======================================
	// 状態
	//======================================
	typedef enum
	{
		NORMAL = 0,//通常
		DAMAGE,//ダメージ
		MAX
	}STATE;

	//======================================
	// 関数
	//======================================
	CPlayer(int nPriority = 3);//コンストラクタ
	~CPlayer() override;//デストラクタ
	HRESULT Init() override;//初期化処理
	void Uninit() override;//終了処理
	void Update() override;//更新処理
	void Draw() override;//描画処理
	static CPlayer* Create(D3DXVECTOR3 pos);//生成処理
	bool Collision(D3DXVECTOR3& pos);//当たり判定

	//パラメータ設定
	void SetPlayerState(STATE state, int nCnt)
	{ 
		m_State = state;//状態
		m_nCntState = nCnt;//状態カウンタ
	}

private:
	//======================================
	// 関数
	//======================================
	void Move();//移動処理
	void Reflect();//反射処理
	void CollisionZone(D3DXVECTOR3& pos, CObject*& pObj);//ゾーンとの当たり判定

	//======================================
	// 変数
	//======================================
	const int MAX_DIFFUSION = 2;//反射弾拡散数
	const int COMMAND_TIME = 30;//コマンド入力受付フレーム
	const float DIFFUSION_RATE = 0.1f;//拡散率
	const float MIN_REFLECT_POWER = 0.01f;//反射する最低パワー値
	const float MAX_REFLECT_POWER = 2.0f;//反射する場合最大パワー値
	const float MIN_REFLECT_SPEED = 3.0f;//反射速度倍率最低値
	const float MAX_TURN = 0.4f;//回転速度
	const float MAX_INERTIA = 0.2f;//減衰強度
	const char* PLAYER_CHARACTER_INFO = "data/MODEL/PLAYER/SetPlayer.txt";//プレイヤーキャラクター情報ファイル
	STATE m_State;//状態
	int m_nCntState;//状態カウンタ
	bool m_bLightUp;//ライトアップフラグ
};

#endif