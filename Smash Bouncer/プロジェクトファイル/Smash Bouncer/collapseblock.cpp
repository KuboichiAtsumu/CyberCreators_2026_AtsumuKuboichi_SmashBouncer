//==============================================================================================================================================
//
// バリアブロックに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "collapseblock.h"//崩れるブロック

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CCollapseBlock::CCollapseBlock(int nPriority) : CBlock(nPriority)
{
	//テクスチャ生成
	CTexture* pTex = CManager::GetTexture();//取得

	//登録
	for (int nCnt = 0; nCnt < MAX_LIFE; nCnt++)
	{
		pTex->Regist(COLLAPSE_TEXTURE[nCnt]);
	}
	
	//メンバ変数初期化
	m_nLife = MAX_LIFE;//ライフ
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CCollapseBlock::~CCollapseBlock()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CCollapseBlock::Init()
{
	//ブロック初期化処理
	if (FAILED(CBlock::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CCollapseBlock::Uninit()
{
	//ブロック終了処理
	CBlock::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CCollapseBlock::Update()
{
	//エディタモードの場合
	if (CManager::GetScene()->GetEditMode())
	{//描画せずに処理を抜ける
		return;
	}

	//ブロック更新処理
	CBlock::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CCollapseBlock::Draw()
{
	//エディタモードの場合
	if (CManager::GetScene()->GetEditMode())
	{//描画せずに処理を抜ける
		return;
	}

	//ブロック描画処理
	CBlock::Draw();
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
void CCollapseBlock::Collision(D3DXVECTOR3& pos, D3DXVECTOR3& oldpos, D3DXVECTOR3& size)
{
	//ブロックの当たり判定
	CBlock::Collision(pos, oldpos, size);
}

//===========================================================================================================
// 反射処理
//===========================================================================================================
bool CCollapseBlock::Reflection(D3DXVECTOR3& pos, D3DXVECTOR3& oldpos, D3DXVECTOR3& move, D3DXVECTOR3& rot, D3DXVECTOR3& size)
{
	//ローカル変数宣言
	bool bReflection = false;//反射フラグ

	//ブロックの反射処理から反射フラグ情報を取得
	bReflection = CBlock::Reflection(pos, oldpos, move, rot, size);

	//反射フラグがtrueだった場合
	if (bReflection)
	{
		//ヒット処理
		Hit();
	}

	//反射フラグを返す
	return bReflection;
}

//===========================================================================================================
// ヒット処理
//===========================================================================================================
void CCollapseBlock::Hit()
{
	//ライフを減らす
	m_nLife--;

	//ライフが0になった場合
	if (m_nLife <= 0)
	{
		//終了処理
		Uninit();
		return;//処理を抜ける
	}

	//テクスチャを変更
	CTexture* pTex = CManager::GetTexture();//取得
	int nTextureIdx = pTex->Regist(COLLAPSE_TEXTURE[MAX_LIFE - m_nLife]);//登録
	BindTexture(pTex->GetAddress(nTextureIdx));//設定
	SetTextureIdx(nTextureIdx);//ID設定
}
