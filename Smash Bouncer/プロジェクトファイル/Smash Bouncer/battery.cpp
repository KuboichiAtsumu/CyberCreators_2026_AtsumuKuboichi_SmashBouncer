//==============================================================================================================================================
//
// 砲台に関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "battery.h"//砲台
#include "player.h"//プレイヤー
#include "bullet.h"//バレット
#include "effect3D.h"//3Dエフェクト

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CBattery::CBattery(int nPriority) : CBlock(nPriority)
{
	//メンバ変数初期化
	m_nCntShot = 0;//弾発射カウント

	//次の発射までの時間を設定
	SetInterval();
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CBattery::~CBattery()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CBattery::Init()
{
	//ブロック初期化処理
	if (FAILED(CBlock::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CBattery::Uninit()
{
	//ブロック終了処理
	CBlock::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CBattery::Update()
{
	//エディタモードの場合
	if (CManager::GetScene()->GetEditMode())
	{
		//更新せずに処理を抜ける
		return;
	}

	//現在のステージと座標が一致しない場合
	if (CGame::GetNumStage() != GetPostStageID())
	{
		//更新せずに処理を抜ける
		return;
	}

	//移動中の場合
	if (CGame::GetGameState() == CGame::STATE_MOVE)
	{
		//更新せずに処理を抜ける
		return;
	}

	//ローカル変数宣言
	float fLength = 0.0f;//プレイヤーとの距離
	D3DXVECTOR3 pos = GetPos();//位置情報
	D3DXVECTOR3 rot = GetRot();//角度情報
	D3DXVECTOR3 PlayerPos{ 0.0f,0.0f,0.0f };//プレイヤーの位置情報

	//指定した順番にオブジェクト情報を取得
	for (int nCnt = 0; nCnt < MAX_PRIORITY; nCnt++)
	{
		//先頭のオブジェクト情報を取得
		CObject* pObj = CObject::GetTop(nCnt);

		//オブジェクト情報がnullptrになるまで繰り返す
		while (pObj != nullptr)
		{
			//次のオブジェクト情報を取得
			CObject* pNext = pObj->GetNext();

			//オブジェクトタイプの取得
			CObject::TYPE type = pObj->GetType();

			//タイプがプレイヤーの場合
			if (type == CObject::TYPE::PLAYER)
			{
				//オブジェクト情報をプレイヤー情報に変換
				CPlayer* pPlayer = (CPlayer*)pObj;

				//プレイヤーの位置情報を取得
				PlayerPos = pPlayer->GetPos();

				//各座標のプレイヤーとバレットの距離を求める
				D3DXVECTOR3 Distance{ pos.x - PlayerPos.x, pos.y - PlayerPos.y, pos.z - PlayerPos.z };

				//プレイヤーまでの角度を求める
				float fAngle = atan2f(Distance.x, Distance.z);

				//プレイヤーまでの距離を求める
				fLength = sqrtf(powf(Distance.x, 2.0f) + powf(Distance.z, 2.0f)) * 0.5f;

				//エネミーをプレイヤーの方向に向ける
				rot.y = fAngle;
			}

			//オブジェクト情報を次の情報に変更する
			pObj = pNext;
		}
	}

	//情報の設定
	SetRot(rot);//向き

	//弾発射をカウント
	m_nCntShot++;

	//カウントが最大まで達した場合
	if (m_nCntShot >= CProcess::MAX_FRAME * m_nIntervalShot)
	{
		//弾の移動量を設定
		D3DXVECTOR3 BulletMove = D3DXVECTOR3(sinf(rot.y + D3DX_PI) * (fLength * 0.03f), 10.0f, cosf(rot.y + D3DX_PI) * (fLength * 0.03f));

		//弾を生成
		CBullet::Create(pos, BulletMove, CBullet::BULLETTYPE::LAUNCH_ENEMY);

		//ターゲットを生成
		PlayerPos.y += 0.03f;
		CEffect3D::Create(CEffect3D::EFFECT_3D_TARGET, PlayerPos, { 0.0f, 0.0f, 0.0f }, { 30.0f, 0.0f, 30.0f });

		//カウントリセット
		m_nCntShot = 0;

		//次の発射までの時間を設定
		SetInterval();
	}

	//ブロック更新処理
	CBlock::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CBattery::Draw()
{
	//エディタモードの場合
	if (CManager::GetScene()->GetEditMode())
	{//描画せずに処理を抜ける
		return;
	}

	//ブロック描画処理
	CBlock::Draw();
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
void CBattery::Collision(D3DXVECTOR3& pos, D3DXVECTOR3& oldpos, D3DXVECTOR3& size)
{
	//ブロックの当たり判定
	CBlock::Collision(pos, oldpos, size);
}