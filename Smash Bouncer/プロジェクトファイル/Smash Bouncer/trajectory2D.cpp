//==============================================================================================================================================
//
// 2Dの軌跡に関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "trajectory2D.h"//軌跡(2D)

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CTrajectory2D::CTrajectory2D(int nPriority) : CObject2D(nPriority)
{
	//メンバ変数初期化
	m_nLife = MAX_LIFE;//ライフ
	m_TextureFile = {};//テクスチャファイルパス
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CTrajectory2D::~CTrajectory2D()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CTrajectory2D::Init()
{
	//テクスチャ生成
	CTexture* pTex = CManager::GetTexture();//取得
	int nTextureIdx = pTex->Regist(m_TextureFile);//登録
	BindTexture(pTex->GetAddress(nTextureIdx));//設定
	SetTextureIdx(nTextureIdx);//ID設定

	//2Dオブジェクト初期化処理
	if (FAILED(CObject2D::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CTrajectory2D::Uninit()
{
	//2Dオブジェクト終了処理
	CObject2D::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CTrajectory2D::Update()
{
	//ローカル変数宣言
	D3DXVECTOR2 size = GetSize();//サイズ情報

	//ライフ減少
	m_nLife--;

	//ライフに合わせてサイズを縮小していく
	size *= (float)m_nLife / (float)MAX_LIFE;

	//更新情報設定
	SetSize(size);//サイズ

	//2Dオブジェクト更新処理
	CObject2D::Update();

	//ライフが0の場合
	if (m_nLife <= 0)
	{
		//終了処理
		Uninit();
	}
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CTrajectory2D::Draw()
{
	//削除フラグがtrueの場合
	if (GetDeleteFlag())
	{
		//処理を抜ける
		return;
	}

	//ローカル変数宣言
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();//デバイスの取得

	//αブレンディングを加算合成に設定
	pDevice->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
	pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
	pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

	//2Dオブジェクト描画処理
	CObject2D::Draw();

	//αブレンディングを元に戻す
	pDevice->SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);
	pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);
	pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);
}

//===========================================================================================================
// 生成処理
//===========================================================================================================
CTrajectory2D* CTrajectory2D::Create(D3DXVECTOR2 pos, D3DXVECTOR2 size, D3DXCOLOR col, const char* TextureFile)
{
	CTrajectory2D* pTrajectory = NEW CTrajectory2D();

	//パラメータ設定
	pTrajectory->SetType(UI);//オブジェクトタイプ
	pTrajectory->SetPos(pos);//位置
	pTrajectory->SetSize(size);//サイズ
	pTrajectory->SetColor(col);//カラー
	pTrajectory->SetTextureFile(TextureFile);//テクスチャファイル

	//初期化処理
	pTrajectory->Init();

	return pTrajectory;
}
