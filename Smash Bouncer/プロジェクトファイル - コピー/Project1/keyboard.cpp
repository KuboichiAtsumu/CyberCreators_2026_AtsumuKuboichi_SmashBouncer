//==============================================================================================================================================
//
// キーボード入力処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "keyboard.h"//キーボード

//===========================================================================================================
// 静的メンバ変数初期化
//===========================================================================================================
int CInputKeyboard::m_nCntKey = 0;//長押し時間

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CInputKeyboard::CInputKeyboard() : m_aKeyState(), m_aKeyStateTrigger()
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CInputKeyboard::~CInputKeyboard()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CInputKeyboard::Init(HINSTANCE hInstance, HWND hWnd)
{
	//DirectInputオブジェクトの生成
	if (FAILED(CInput::Init(hInstance)))
	{
		return E_FAIL;
	}
	//入力デバイス(キーボード)の生成
	if (FAILED(m_pInput->CreateDevice(GUID_SysKeyboard, &m_pDevice, nullptr)))
	{
		return E_FAIL;
	}
	//データフォーマットを設定
	if (FAILED(m_pDevice->SetDataFormat(&c_dfDIKeyboard)))
	{
		return E_FAIL;
	}
	//協調モードを設定
	if (FAILED(m_pDevice->SetCooperativeLevel(hWnd, (DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}
	//キーボードへのアクセス権を獲得
	m_pDevice->Acquire();
	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CInputKeyboard::Uninit()
{
	//長押し時間
	m_nCntKey = 0;

	//インプット終了処理
	CInput::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CInputKeyboard::Update()
{
	BYTE aKeyState[MAX_KEY]; //キーボードの入力情報

	//入力デバイスからデータを取得
	if (SUCCEEDED(m_pDevice->GetDeviceState(sizeof(aKeyState), &aKeyState[0])))
	{
		for (int nCntKey = 0; nCntKey < MAX_KEY; nCntKey++)
		{
			m_aKeyStateTrigger[nCntKey] = (m_aKeyState[nCntKey] ^ aKeyState[nCntKey]) & aKeyState[nCntKey]; //キーボードのトリガー情報を保存
			m_aKeyState[nCntKey] = aKeyState[nCntKey]; //キーボードのプレス情報を保存
		}
	}
	else
	{
		m_pDevice->Acquire(); //キーボードへのアクセス権を獲得
	}
}

//===========================================================================================================
// プレス情報取得
//===========================================================================================================
bool CInputKeyboard::GetPress(int nKey)
{
	return ((m_aKeyState[nKey] & 0x80) != 0) ? true : false;
}

//===========================================================================================================
// トリガー情報取得
//===========================================================================================================
bool CInputKeyboard::GetTrigger(int nKey)
{
	return ((m_aKeyStateTrigger[nKey] & 0x80) != 0) ? true : false;
}

//===========================================================================================================
// リピート情報取得
//===========================================================================================================
bool CInputKeyboard::GetRepeat(int nKey)
{
	//キーを押している間
	if (GetPress(nKey))
	{
		if (GetTrigger(nKey))
		{
			m_nCntKey = 0;
			return true;
		}

		m_nCntKey++; //押している間をカウント

		if (m_nCntKey >= SPEED_REPEAT) //押し続ける間
		{
			m_nCntKey = 0;
			return true;
		}
	}

	return false;
}
