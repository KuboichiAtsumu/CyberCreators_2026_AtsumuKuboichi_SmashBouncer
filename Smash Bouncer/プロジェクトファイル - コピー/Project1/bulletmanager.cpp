//==============================================================================================================================================
//
// バレットマネージャーに関する処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "bulletmanager.h"//バレットマネージャー

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CBulletManager::CBulletManager(int nPriority) : CObjectManager(nPriority)
{
	//静的メンバ変数初期化
	m_pTop = nullptr;//先頭アドレス
	m_pCur = nullptr;//終端アドレス
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CBulletManager::~CBulletManager()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CBulletManager::Init()
{
	//オブジェクトマネージャー初期化処理
	if (FAILED(CObjectManager::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CBulletManager::Uninit()
{
	//オブジェクトマネージャー終了処理
	CObjectManager::Uninit();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CBulletManager::Update()
{
	//先頭アドレスを取得する
	CBullet* pBullet = m_pTop;

	//オブジェクト情報がnullptrになるまで繰り返す
	while (pBullet != nullptr)
	{
		//次のオブジェクト情報を取得
		CBullet* pNext = pBullet->GetNextBullet();

		//削除フラグがtrueの場合
		if (pBullet->GetDeleteFlag())
		{
			//前のオブジェクト情報を取得
			CBullet* pPrev = pBullet->GetPrevBullet();

			//前のオブジェクト情報が存在する場合
			if (pPrev != nullptr)
			{
				//次のオブジェクト情報を繋ぐ
				pPrev->SetNextBullet(pNext);
			}
			//前のオブジェクト情報が存在しない場合
			else
			{
				//次のオブジェクト情報が存在する場合
				if (pNext != nullptr)
				{
					//次のオブジェクト情報の前のオブジェクト情報をnullptrに設定
					pNext->SetPrevBullet(nullptr);
				}

				//先頭アドレスを変更
				m_pTop = pNext;
			}

			//次のオブジェクト情報が存在する場合
			if (pNext != nullptr)
			{
				//前のオブジェクト情報を繋ぐ
				pNext->SetPrevBullet(pPrev);
			}
			//次のオブジェクト情報が存在しない場合
			else
			{
				//前のオブジェクト情報が存在する場合
				if (pPrev != nullptr)
				{
					//前のオブジェクト情報の次のオブジェクト情報をnullptrに設定
					pPrev->SetNextBullet(nullptr);
				}

				//終端アドレスを変更
				m_pCur = pPrev;
			}
		}

		//オブジェクト情報を次の情報に変更する
		pBullet = pNext;
	}
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CBulletManager::Draw()
{
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
CBullet* CBulletManager::Collision(D3DXVECTOR3& pos)
{
	//先頭アドレスを取得する
	CBullet* pBullet = m_pTop;

	//オブジェクト情報がnullptrになるまで繰り返す
	while (pBullet != nullptr)
	{
		//次のオブジェクト情報を取得
		CBullet* pNext = pBullet->GetNextBullet();

		//敵に当たった場合
		if (!pBullet->GetDeleteFlag() && pBullet->Collision(pos))
		{
			//バレットのタイプ情報を返す
			return pBullet;
		}

		//オブジェクト情報を次の情報に変更する
		pBullet = pNext;
	}

	return nullptr;
}

//===========================================================================================================
// 登録処理
//===========================================================================================================
void CBulletManager::Regist(CBullet* pBullet)
{
	//先頭アドレスが存在しない場合
	if (m_pTop == nullptr)
	{
		//生成したバレット情報を先頭アドレスに代入
		m_pTop = pBullet;

		//前のオブジェクト情報にnullptrを代入
		m_pTop->SetPrevBullet(nullptr);
	}

	//先頭アドレスが存在する場合
	else
	{
		//先頭アドレスを取得
		CBullet* pAllBullet = m_pTop;

		//オブジェクト情報がnullptrになるまで繰り返す
		while (pAllBullet != nullptr)
		{
			//次のオブジェクト情報が存在しない場合
			if (pAllBullet->GetNextBullet() == nullptr)
			{
				//次のオブジェクト情報に生成したバレット情報を保存
				pAllBullet->SetNextBullet(pBullet);

				//生成したバレット情報の前のオブジェクト情報を保存
				pBullet->SetPrevBullet(pAllBullet);

				break;
			}

			//オブジェクト情報を次の情報に変更する
			pAllBullet = pAllBullet->GetNextBullet();
		}
	}

	//自身の次のオブジェクト情報にnullptrを代入
	pBullet->SetNextBullet(nullptr);

	//終端アドレスを代入
	m_pCur = pBullet;
}
